{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8579071,"sourceType":"datasetVersion","datasetId":5130505}],"dockerImageVersionId":30716,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import json\nimport pandas as pd\nimport numpy as np\nimport torch\nfrom pathlib import Path\nfrom torch.utils.data import Dataset, DataLoader\nimport pytorch_lightning as pl\nfrom pytorch_lightning.callbacks import ModelCheckpoint\nfrom pytorch_lightning.loggers import TensorBoardLogger\nfrom sklearn.model_selection import train_test_split\nfrom termcolor import colored\nimport textwrap\nfrom transformers import (\n     AdamW,\n     T5ForConditionalGeneration,\n     T5TokenizerFast as T5Tokenizer\n)\nfrom tqdm.auto import tqdm\nimport seaborn as sns\nfrom pylab import rcParams\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\n%matplotlib inline\n%config InLineBackend.figure_format = 'rectina'\nsns.set(style='whitegrid', palette = 'muted', font_scale = 1.2)\nrcParams['figure.figsize'] = 16, 10","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-01T15:12:16.991332Z","iopub.execute_input":"2024-06-01T15:12:16.991858Z","iopub.status.idle":"2024-06-01T15:12:17.008354Z","shell.execute_reply.started":"2024-06-01T15:12:16.991827Z","shell.execute_reply":"2024-06-01T15:12:17.007316Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/news-summary-dataset/news_summary.csv', encoding = 'latin-1')\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:13:18.489293Z","iopub.execute_input":"2024-06-01T15:13:18.490256Z","iopub.status.idle":"2024-06-01T15:13:18.772360Z","shell.execute_reply.started":"2024-06-01T15:13:18.490210Z","shell.execute_reply":"2024-06-01T15:13:18.771503Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"               author                  date  \\\n0        Chhavi Tyagi  03 Aug 2017,Thursday   \n1         Daisy Mowke  03 Aug 2017,Thursday   \n2      Arshiya Chopra  03 Aug 2017,Thursday   \n3       Sumedha Sehra  03 Aug 2017,Thursday   \n4  Aarushi Maheshwari  03 Aug 2017,Thursday   \n\n                                           headlines  \\\n0  Daman & Diu revokes mandatory Rakshabandhan in...   \n1  Malaika slams user who trolled her for 'divorc...   \n2  'Virgin' now corrected to 'Unmarried' in IGIMS...   \n3  Aaj aapne pakad liya: LeT man Dujana before be...   \n4  Hotel staff to get training to spot signs of s...   \n\n                                           read_more  \\\n0  http://www.hindustantimes.com/india-news/raksh...   \n1  http://www.hindustantimes.com/bollywood/malaik...   \n2  http://www.hindustantimes.com/patna/bihar-igim...   \n3  http://indiatoday.intoday.in/story/abu-dujana-...   \n4  http://indiatoday.intoday.in/story/sex-traffic...   \n\n                                                text  \\\n0  The Administration of Union Territory Daman an...   \n1  Malaika Arora slammed an Instagram user who tr...   \n2  The Indira Gandhi Institute of Medical Science...   \n3  Lashkar-e-Taiba's Kashmir commander Abu Dujana...   \n4  Hotels in Maharashtra will train their staff t...   \n\n                                               ctext  \n0  The Daman and Diu administration on Wednesday ...  \n1  From her special numbers to TV?appearances, Bo...  \n2  The Indira Gandhi Institute of Medical Science...  \n3  Lashkar-e-Taiba's Kashmir commander Abu Dujana...  \n4  Hotels in Mumbai and other Indian cities are t...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>author</th>\n      <th>date</th>\n      <th>headlines</th>\n      <th>read_more</th>\n      <th>text</th>\n      <th>ctext</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Chhavi Tyagi</td>\n      <td>03 Aug 2017,Thursday</td>\n      <td>Daman &amp; Diu revokes mandatory Rakshabandhan in...</td>\n      <td>http://www.hindustantimes.com/india-news/raksh...</td>\n      <td>The Administration of Union Territory Daman an...</td>\n      <td>The Daman and Diu administration on Wednesday ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Daisy Mowke</td>\n      <td>03 Aug 2017,Thursday</td>\n      <td>Malaika slams user who trolled her for 'divorc...</td>\n      <td>http://www.hindustantimes.com/bollywood/malaik...</td>\n      <td>Malaika Arora slammed an Instagram user who tr...</td>\n      <td>From her special numbers to TV?appearances, Bo...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Arshiya Chopra</td>\n      <td>03 Aug 2017,Thursday</td>\n      <td>'Virgin' now corrected to 'Unmarried' in IGIMS...</td>\n      <td>http://www.hindustantimes.com/patna/bihar-igim...</td>\n      <td>The Indira Gandhi Institute of Medical Science...</td>\n      <td>The Indira Gandhi Institute of Medical Science...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Sumedha Sehra</td>\n      <td>03 Aug 2017,Thursday</td>\n      <td>Aaj aapne pakad liya: LeT man Dujana before be...</td>\n      <td>http://indiatoday.intoday.in/story/abu-dujana-...</td>\n      <td>Lashkar-e-Taiba's Kashmir commander Abu Dujana...</td>\n      <td>Lashkar-e-Taiba's Kashmir commander Abu Dujana...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Aarushi Maheshwari</td>\n      <td>03 Aug 2017,Thursday</td>\n      <td>Hotel staff to get training to spot signs of s...</td>\n      <td>http://indiatoday.intoday.in/story/sex-traffic...</td>\n      <td>Hotels in Maharashtra will train their staff t...</td>\n      <td>Hotels in Mumbai and other Indian cities are t...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df = df[[\"text\", \"ctext\"]]\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:13:45.641614Z","iopub.execute_input":"2024-06-01T15:13:45.642190Z","iopub.status.idle":"2024-06-01T15:13:45.657771Z","shell.execute_reply.started":"2024-06-01T15:13:45.642158Z","shell.execute_reply":"2024-06-01T15:13:45.656951Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                                                text  \\\n0  The Administration of Union Territory Daman an...   \n1  Malaika Arora slammed an Instagram user who tr...   \n2  The Indira Gandhi Institute of Medical Science...   \n3  Lashkar-e-Taiba's Kashmir commander Abu Dujana...   \n4  Hotels in Maharashtra will train their staff t...   \n\n                                               ctext  \n0  The Daman and Diu administration on Wednesday ...  \n1  From her special numbers to TV?appearances, Bo...  \n2  The Indira Gandhi Institute of Medical Science...  \n3  Lashkar-e-Taiba's Kashmir commander Abu Dujana...  \n4  Hotels in Mumbai and other Indian cities are t...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>ctext</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>The Administration of Union Territory Daman an...</td>\n      <td>The Daman and Diu administration on Wednesday ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Malaika Arora slammed an Instagram user who tr...</td>\n      <td>From her special numbers to TV?appearances, Bo...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>The Indira Gandhi Institute of Medical Science...</td>\n      <td>The Indira Gandhi Institute of Medical Science...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lashkar-e-Taiba's Kashmir commander Abu Dujana...</td>\n      <td>Lashkar-e-Taiba's Kashmir commander Abu Dujana...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Hotels in Maharashtra will train their staff t...</td>\n      <td>Hotels in Mumbai and other Indian cities are t...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.columns = [\"summary\",\"text\"]\ndf = df.dropna()\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:14:05.437546Z","iopub.execute_input":"2024-06-01T15:14:05.438343Z","iopub.status.idle":"2024-06-01T15:14:05.455143Z","shell.execute_reply.started":"2024-06-01T15:14:05.438282Z","shell.execute_reply":"2024-06-01T15:14:05.454067Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"                                             summary  \\\n0  The Administration of Union Territory Daman an...   \n1  Malaika Arora slammed an Instagram user who tr...   \n2  The Indira Gandhi Institute of Medical Science...   \n3  Lashkar-e-Taiba's Kashmir commander Abu Dujana...   \n4  Hotels in Maharashtra will train their staff t...   \n\n                                                text  \n0  The Daman and Diu administration on Wednesday ...  \n1  From her special numbers to TV?appearances, Bo...  \n2  The Indira Gandhi Institute of Medical Science...  \n3  Lashkar-e-Taiba's Kashmir commander Abu Dujana...  \n4  Hotels in Mumbai and other Indian cities are t...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>summary</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>The Administration of Union Territory Daman an...</td>\n      <td>The Daman and Diu administration on Wednesday ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Malaika Arora slammed an Instagram user who tr...</td>\n      <td>From her special numbers to TV?appearances, Bo...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>The Indira Gandhi Institute of Medical Science...</td>\n      <td>The Indira Gandhi Institute of Medical Science...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lashkar-e-Taiba's Kashmir commander Abu Dujana...</td>\n      <td>Lashkar-e-Taiba's Kashmir commander Abu Dujana...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Hotels in Maharashtra will train their staff t...</td>\n      <td>Hotels in Mumbai and other Indian cities are t...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:14:29.136666Z","iopub.execute_input":"2024-06-01T15:14:29.137487Z","iopub.status.idle":"2024-06-01T15:14:29.143889Z","shell.execute_reply.started":"2024-06-01T15:14:29.137446Z","shell.execute_reply":"2024-06-01T15:14:29.142984Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"(4396, 2)"},"metadata":{}}]},{"cell_type":"code","source":"train_df, test_df = train_test_split(df, test_size = 0.1)\ntrain_df.shape , test_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:14:42.496639Z","iopub.execute_input":"2024-06-01T15:14:42.497445Z","iopub.status.idle":"2024-06-01T15:14:42.505829Z","shell.execute_reply.started":"2024-06-01T15:14:42.497410Z","shell.execute_reply":"2024-06-01T15:14:42.505009Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"((3956, 2), (440, 2))"},"metadata":{}}]},{"cell_type":"code","source":"class NewsSummaryDataset(Dataset):\n  def __init__(self, data: pd.DataFrame, tokenizer: T5Tokenizer, text_max_token_len: int = 512, summary_max_token_len: int = 128):\n    self.tokenizer = tokenizer\n    self.data = data\n    self.text_max_token_len = text_max_token_len\n    self.summary_max_token_len = summary_max_token_len\n\n  def __len__(self):\n    return len(self.data)\n\n  def __getitem__(self, index: int):\n    data_row = self.data.iloc[index]\n    text = data_row[\"text\"]\n    summary = data_row[\"summary\"]\n\n    text_encoding = self.tokenizer(\n        text,\n        max_length=self.text_max_token_len,\n        padding=\"max_length\",\n        truncation=True,\n        return_attention_mask=True,\n        add_special_tokens=True,\n        return_tensors=\"pt\"\n    )\n\n    summary_encoding = self.tokenizer(\n        summary,\n        max_length=self.summary_max_token_len,\n        padding=\"max_length\",\n        truncation=True,\n        return_attention_mask=True,\n        add_special_tokens=True,\n        return_tensors=\"pt\"\n    )\n\n    labels = summary_encoding[\"input_ids\"]\n    labels[labels == 0] = -100\n\n    return {\n        \"text\": text,\n        \"summary\": summary,\n        \"text_input_ids\": text_encoding[\"input_ids\"].flatten(),\n        \"text_attention_mask\": text_encoding[\"attention_mask\"].flatten(),\n        \"labels\": labels.flatten(),\n        \"labels_attention_mask\": summary_encoding[\"attention_mask\"].flatten()\n    }\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:14:55.705974Z","iopub.execute_input":"2024-06-01T15:14:55.707059Z","iopub.status.idle":"2024-06-01T15:14:55.716159Z","shell.execute_reply.started":"2024-06-01T15:14:55.707022Z","shell.execute_reply":"2024-06-01T15:14:55.715169Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"class NewsSummaryDataModule(pl.LightningDataModule):\n  def __init__(self, train_df: pd.DataFrame, test_df: pd.DataFrame, tokenizer: T5Tokenizer, batch_size = 8,\n               text_max_token_len: int = 512, summary_max_token_len: int = 128):\n    super().__init__()\n\n    self.train_df = train_df\n    self.test_df = test_df\n    self.batch_size = batch_size\n    self.tokenizer = tokenizer\n    self.text_max_token_len = text_max_token_len\n    self.summary_max_token_len = summary_max_token_len\n\n\n  def setup(self, stage=None):\n    self.train_dataset = NewsSummaryDataset(\n        self.train_df,\n        self.tokenizer,\n        self.text_max_token_len,\n        self.summary_max_token_len,\n    )\n    self.test_dataset = NewsSummaryDataset(\n        self.test_df,\n        self.tokenizer,\n        self.text_max_token_len,\n        self.summary_max_token_len,\n    )\n\n  def train_dataloader(self):\n    return DataLoader(\n        self.train_dataset,\n        batch_size = self.batch_size,\n        shuffle = True,\n        num_workers = 2\n    )\n\n\n  def val_dataloader(self):\n    return DataLoader(\n        self.test_dataset,\n        batch_size = self.batch_size,\n        shuffle = False,\n        num_workers = 2\n    )\n\n\n  def test_dataloader(self):\n      return DataLoader(\n        self.test_dataset,\n        batch_size = self.batch_size,\n        shuffle = False,\n        num_workers = 2\n    )\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:15:17.845606Z","iopub.execute_input":"2024-06-01T15:15:17.845957Z","iopub.status.idle":"2024-06-01T15:15:17.855344Z","shell.execute_reply.started":"2024-06-01T15:15:17.845929Z","shell.execute_reply":"2024-06-01T15:15:17.854380Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"Model_Name = \"t5-base\"\ntokenizer = T5Tokenizer.from_pretrained(Model_Name)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:15:30.532237Z","iopub.execute_input":"2024-06-01T15:15:30.532827Z","iopub.status.idle":"2024-06-01T15:15:31.624825Z","shell.execute_reply.started":"2024-06-01T15:15:30.532794Z","shell.execute_reply":"2024-06-01T15:15:31.624016Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"spiece.model:   0%|          | 0.00/792k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"609f2269f4234a46a803399a9fc75b88"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.39M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b5c55ab2f5ce4a31b8fb1eeaa7081157"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/1.21k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f5f50a3a3ca5434ab430b20e7e9805c7"}},"metadata":{}}]},{"cell_type":"code","source":"text_token_counts, summary_token_counts = [] ,[]\nfor _, row in train_df.iterrows():\n  text_token_count = len(tokenizer.encode(row[\"text\"]))\n  text_token_counts.append(text_token_count)\n\n  summary_token_count = len(tokenizer.encode(row[\"summary\"]))\n  summary_token_counts.append(summary_token_count)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:16:06.264140Z","iopub.execute_input":"2024-06-01T15:16:06.264522Z","iopub.status.idle":"2024-06-01T15:16:13.681115Z","shell.execute_reply.started":"2024-06-01T15:16:06.264494Z","shell.execute_reply":"2024-06-01T15:16:13.680359Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"fig, (ax1, ax2) = plt.subplots(1,2)\nsns.histplot(text_token_counts, ax=ax1)\nax1.set_title(\"Full text token count\")\nsns.histplot(summary_token_counts, ax = ax2)\nax2.set_title(\"Full Summary token count\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:16:29.911575Z","iopub.execute_input":"2024-06-01T15:16:29.911924Z","iopub.status.idle":"2024-06-01T15:16:31.463481Z","shell.execute_reply.started":"2024-06-01T15:16:29.911895Z","shell.execute_reply":"2024-06-01T15:16:31.462457Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Full Summary token count')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1600x1000 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"N_Epochs = 3\nBatch_Size = 8\ndata_module = NewsSummaryDataModule(train_df, test_df, tokenizer, batch_size= Batch_Size)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:16:51.383050Z","iopub.execute_input":"2024-06-01T15:16:51.384013Z","iopub.status.idle":"2024-06-01T15:16:51.388681Z","shell.execute_reply.started":"2024-06-01T15:16:51.383969Z","shell.execute_reply":"2024-06-01T15:16:51.387852Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"class NewsDataModel(pl.LightningModule):\n    def __init__(self):\n        super().__init__()\n        self.model = T5ForConditionalGeneration.from_pretrained(Model_Name, return_dict=True)\n\n    def forward(self, input_ids, attention_mask, decoder_attention_mask, labels=None):\n        output = self.model(\n            input_ids,\n            attention_mask=attention_mask,\n            labels=labels,\n            decoder_attention_mask=decoder_attention_mask\n        )\n        return output.loss, output.logits\n\n    def training_step(self, batch, batch_idx):\n        input_ids = batch[\"text_input_ids\"]\n        attention_mask = batch[\"text_attention_mask\"]\n        labels = batch[\"labels\"]\n        labels_attention_mask = batch[\"labels_attention_mask\"]\n\n        loss, outputs = self(\n            input_ids=input_ids,\n            attention_mask=attention_mask,\n            decoder_attention_mask=labels_attention_mask,\n            labels=labels\n        )\n\n        self.log(\"train_loss\", loss, prog_bar=True, logger=True)\n        return loss\n\n    def validation_step(self, batch, batch_idx):\n        input_ids = batch[\"text_input_ids\"]\n        attention_mask = batch[\"text_attention_mask\"]\n        labels = batch[\"labels\"]\n        labels_attention_mask = batch[\"labels_attention_mask\"]\n\n        loss, outputs = self(\n            input_ids=input_ids,\n            attention_mask=attention_mask,\n            decoder_attention_mask=labels_attention_mask,\n            labels=labels\n        )\n\n        self.log(\"validation_loss\", loss, prog_bar=True, logger=True)\n        return loss\n\n    def test_step(self, batch, batch_idx):\n        input_ids = batch[\"text_input_ids\"]\n        attention_mask = batch[\"text_attention_mask\"]\n        labels = batch[\"labels\"]\n        labels_attention_mask = batch[\"labels_attention_mask\"]\n\n        loss, outputs = self(\n            input_ids=input_ids,\n            attention_mask=attention_mask,\n            decoder_attention_mask=labels_attention_mask,\n            labels=labels\n        )\n\n        self.log(\"test_loss\", loss, prog_bar=True, logger=True)\n        return loss\n\n    def configure_optimizers(self):\n        return AdamW(self.parameters(), lr=0.0001)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:17:28.909001Z","iopub.execute_input":"2024-06-01T15:17:28.909805Z","iopub.status.idle":"2024-06-01T15:17:28.921439Z","shell.execute_reply.started":"2024-06-01T15:17:28.909770Z","shell.execute_reply":"2024-06-01T15:17:28.920528Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"model = NewsDataModel()\n\n%load_ext tensorboard\n%tensorboard --logdir ./lightning_logs\n%reload_ext tensorboard\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:54:36.831686Z","iopub.execute_input":"2024-06-01T15:54:36.832524Z","iopub.status.idle":"2024-06-01T15:54:37.681291Z","shell.execute_reply.started":"2024-06-01T15:54:36.832489Z","shell.execute_reply":"2024-06-01T15:54:37.680520Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"The tensorboard extension is already loaded. To reload it, use:\n  %reload_ext tensorboard\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Reusing TensorBoard on port 6006 (pid 153), started 0:36:20 ago. (Use '!kill 153' to kill it.)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n      <iframe id=\"tensorboard-frame-fd4b82bc0a94b557\" width=\"100%\" height=\"800\" frameborder=\"0\">\n      </iframe>\n      <script>\n        (function() {\n          const frame = document.getElementById(\"tensorboard-frame-fd4b82bc0a94b557\");\n          const url = new URL(\"/\", window.location);\n          const port = 6006;\n          if (port) {\n            url.port = port;\n          }\n          frame.src = url;\n        })();\n      </script>\n    "},"metadata":{}}]},{"cell_type":"code","source":"%reload_ext tensorboard\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:54:45.645823Z","iopub.execute_input":"2024-06-01T15:54:45.646480Z","iopub.status.idle":"2024-06-01T15:54:45.651973Z","shell.execute_reply.started":"2024-06-01T15:54:45.646446Z","shell.execute_reply":"2024-06-01T15:54:45.650984Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"checkpoint_callback = ModelCheckpoint(\n    dirpath=\"checkpoints\",\n    filename=\"best-checkpoint\",\n    save_top_k=1,\n    verbose = True,\n    monitor = \"validation_loss\",\n    mode=\"min\"\n)\n\nlogger = TensorBoardLogger(\"lightning_logs\", name=\"news_summary\")\n\ntrainer = pl.Trainer(\n    logger = logger,\n    callbacks=[checkpoint_callback],\n    max_epochs = N_Epochs,\n    accelerator=\"auto\",\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:18:33.839426Z","iopub.execute_input":"2024-06-01T15:18:33.839780Z","iopub.status.idle":"2024-06-01T15:18:34.536624Z","shell.execute_reply.started":"2024-06-01T15:18:33.839750Z","shell.execute_reply":"2024-06-01T15:18:34.535774Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"trainer.fit(model, data_module)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:19:57.127416Z","iopub.execute_input":"2024-06-01T15:19:57.127770Z","iopub.status.idle":"2024-06-01T15:49:37.623319Z","shell.execute_reply.started":"2024-06-01T15:19:57.127742Z","shell.execute_reply":"2024-06-01T15:49:37.622275Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stderr","text":"2024-06-01 15:19:57.543515: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-06-01 15:19:57.543572: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-06-01 15:19:57.544953: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n/opt/conda/lib/python3.10/site-packages/transformers/optimization.py:588: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Sanity Checking: |          | 0/? [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Training: |          | 0/? [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6db9baef6ae949baa1c86e93594b7e38"}},"metadata":{}},{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Validation: |          | 0/? [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Validation: |          | 0/? [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Validation: |          | 0/? [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}}]},{"cell_type":"code","source":"# Assuming you have a GPU available, otherwise it will fall back to CPU\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\ntrained_model = NewsDataModel.load_from_checkpoint(\n    trainer.checkpoint_callback.best_model_path\n)\ntrained_model.freeze()\ntrained_model.to(device)\n\n\n\ndef summarize(text):\n  text_encoding = tokenizer(\n      text,\n      max_length = 512,\n      padding = \"max_length\",\n      truncation = True,\n      return_attention_mask = True,\n      add_special_tokens = True,\n      return_tensors = \"pt\"\n  )\n  # Move the input tensors to the same device as the model\n  input_ids = text_encoding[\"input_ids\"].to(device)\n  attention_mask = text_encoding[\"attention_mask\"].to(device)\n\n  print(f\"Input IDs device after move: {input_ids.device}\")\n  print(f\"Attention mask device after move: {attention_mask.device}\")\n  print(f\"Model device: {next(trained_model.model.parameters()).device}\")\n\n  # Ensure the model components are also moved to the correct device\n  trained_model.model.to(device)\n    # Logging for debugging\n\n\n  generated_ids = trained_model.model.generate(\n        input_ids=input_ids,\n        attention_mask=attention_mask,\n        max_length=150,\n        num_beams=2,\n        repetition_penalty=2.5,\n        length_penalty=1.0,\n        early_stopping=True,\n  )\n\n    # Logging for debugging\n  print(f\"Generated IDs device: {generated_ids.device}\")\n\n  preds =  [\n      tokenizer.decode(gen_id, skip_cancel_tokens=True, clean_up_tokenization_spaces = True)\n      for gen_id in generated_ids\n  ]\n\n  return \"\".join(preds)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:57:16.723313Z","iopub.execute_input":"2024-06-01T15:57:16.723661Z","iopub.status.idle":"2024-06-01T15:57:19.645256Z","shell.execute_reply.started":"2024-06-01T15:57:16.723635Z","shell.execute_reply":"2024-06-01T15:57:19.644270Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"sample_row = test_df.iloc[1]\ntext = sample_row[\"text\"]\nmodel_summary = summarize(text)\n\ntext","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:58:14.188169Z","iopub.execute_input":"2024-06-01T15:58:14.188572Z","iopub.status.idle":"2024-06-01T15:58:15.778874Z","shell.execute_reply.started":"2024-06-01T15:58:14.188544Z","shell.execute_reply":"2024-06-01T15:58:15.778001Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Input IDs device after move: cuda:0\nAttention mask device after move: cuda:0\nModel device: cuda:0\nGenerated IDs device: cuda:0\n","output_type":"stream"},{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"'A man arrested by the city police?s crime branch on Thursday night for allegedly possessing illegal arms has turned out to be a member of Rewari?s Aloo gang.On Thursday, the crime team of Sohna police was patrolling the area near Bhondsi during a night-domination exercise when they received information that a member of the Aloo gang was somewhere between Bhondsi and Sohna, the police said.?The team started patrolling in the specific area near Mahendrawada village and found a man wandering on the street. On spotting the police vehicle, he tried to hide,? said Ravinder Kumar, public relations officer (PRO), Gurgaon police.He said that when the police started questioning him, they found his replies suspicious. ?When they searched him, two countrymade pistols and 12 live cartridges were found from his possession,? Kumar said.The man, identified as Rewari resident Kamal alias Palti, was detained and taken to Bhondsi police station. There, a case under Arms Act was registered and he was arrested.During further questioning, it was revealed that he was a member of the Aloo gang and that the gang was involved in a double murder in Rewari on June 27.?He also confessed that he and his gang members were involved in at least two other attempt to murder cases in Rewari and were wanted for other petty crimes as well,? the PRO said.Kamal was out on bail since January and has been involved in various crimes in the district since then, police said.According to police sources, he had to come to Sohna on?Thursday to murder a member of the rival Jhota gang.The Rewari police has been informed of the arrest. ?Kamal and other members of the Aloo gang are wanted in at least three cases, including the double murder case. The Rewari police will now take over the investigation,? Kumar said.'"},"metadata":{}}]},{"cell_type":"code","source":"sample_row[\"summary\"]\n\nmodel_summary","metadata":{"execution":{"iopub.status.busy":"2024-06-01T15:58:27.614577Z","iopub.execute_input":"2024-06-01T15:58:27.614903Z","iopub.status.idle":"2024-06-01T15:58:27.620978Z","shell.execute_reply.started":"2024-06-01T15:58:27.614876Z","shell.execute_reply":"2024-06-01T15:58:27.619950Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"\"<pad> A man arrested by the city's crime branch on Thursday night for allegedly possessing illegal arms has turned out to be a member of Rewari's Aloo gang. The police said that when they started questioning him, he confessed that he and his gang members were involved in at least two other attempt to murder cases in the district.</s>\""},"metadata":{}}]},{"cell_type":"code","source":"# Save the trained model's state dictionary\nmodel_save_path = '/kaggle/working/news_data_model.pth'\ntorch.save(trained_model.state_dict(), model_save_path)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T16:09:30.138486Z","iopub.execute_input":"2024-06-01T16:09:30.138865Z","iopub.status.idle":"2024-06-01T16:09:31.255537Z","shell.execute_reply.started":"2024-06-01T16:09:30.138836Z","shell.execute_reply":"2024-06-01T16:09:31.254700Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"# Later, load the model's state dictionary into a new model instance\nnew_model = NewsDataModel()\nnew_model.load_state_dict(torch.load(model_save_path))\nnew_model.to(device)\nnew_model.eval()  # Set the model to evaluation mode if needed\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T16:11:14.664504Z","iopub.execute_input":"2024-06-01T16:11:14.664856Z","iopub.status.idle":"2024-06-01T16:11:16.365091Z","shell.execute_reply.started":"2024-06-01T16:11:14.664828Z","shell.execute_reply":"2024-06-01T16:11:16.364187Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"NewsDataModel(\n  (model): T5ForConditionalGeneration(\n    (shared): Embedding(32128, 768)\n    (encoder): T5Stack(\n      (embed_tokens): Embedding(32128, 768)\n      (block): ModuleList(\n        (0): T5Block(\n          (layer): ModuleList(\n            (0): T5LayerSelfAttention(\n              (SelfAttention): T5Attention(\n                (q): Linear(in_features=768, out_features=768, bias=False)\n                (k): Linear(in_features=768, out_features=768, bias=False)\n                (v): Linear(in_features=768, out_features=768, bias=False)\n                (o): Linear(in_features=768, out_features=768, bias=False)\n                (relative_attention_bias): Embedding(32, 12)\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (1): T5LayerFF(\n              (DenseReluDense): T5DenseActDense(\n                (wi): Linear(in_features=768, out_features=3072, bias=False)\n                (wo): Linear(in_features=3072, out_features=768, bias=False)\n                (dropout): Dropout(p=0.1, inplace=False)\n                (act): ReLU()\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n        )\n        (1-11): 11 x T5Block(\n          (layer): ModuleList(\n            (0): T5LayerSelfAttention(\n              (SelfAttention): T5Attention(\n                (q): Linear(in_features=768, out_features=768, bias=False)\n                (k): Linear(in_features=768, out_features=768, bias=False)\n                (v): Linear(in_features=768, out_features=768, bias=False)\n                (o): Linear(in_features=768, out_features=768, bias=False)\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (1): T5LayerFF(\n              (DenseReluDense): T5DenseActDense(\n                (wi): Linear(in_features=768, out_features=3072, bias=False)\n                (wo): Linear(in_features=3072, out_features=768, bias=False)\n                (dropout): Dropout(p=0.1, inplace=False)\n                (act): ReLU()\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n        )\n      )\n      (final_layer_norm): T5LayerNorm()\n      (dropout): Dropout(p=0.1, inplace=False)\n    )\n    (decoder): T5Stack(\n      (embed_tokens): Embedding(32128, 768)\n      (block): ModuleList(\n        (0): T5Block(\n          (layer): ModuleList(\n            (0): T5LayerSelfAttention(\n              (SelfAttention): T5Attention(\n                (q): Linear(in_features=768, out_features=768, bias=False)\n                (k): Linear(in_features=768, out_features=768, bias=False)\n                (v): Linear(in_features=768, out_features=768, bias=False)\n                (o): Linear(in_features=768, out_features=768, bias=False)\n                (relative_attention_bias): Embedding(32, 12)\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (1): T5LayerCrossAttention(\n              (EncDecAttention): T5Attention(\n                (q): Linear(in_features=768, out_features=768, bias=False)\n                (k): Linear(in_features=768, out_features=768, bias=False)\n                (v): Linear(in_features=768, out_features=768, bias=False)\n                (o): Linear(in_features=768, out_features=768, bias=False)\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (2): T5LayerFF(\n              (DenseReluDense): T5DenseActDense(\n                (wi): Linear(in_features=768, out_features=3072, bias=False)\n                (wo): Linear(in_features=3072, out_features=768, bias=False)\n                (dropout): Dropout(p=0.1, inplace=False)\n                (act): ReLU()\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n        )\n        (1-11): 11 x T5Block(\n          (layer): ModuleList(\n            (0): T5LayerSelfAttention(\n              (SelfAttention): T5Attention(\n                (q): Linear(in_features=768, out_features=768, bias=False)\n                (k): Linear(in_features=768, out_features=768, bias=False)\n                (v): Linear(in_features=768, out_features=768, bias=False)\n                (o): Linear(in_features=768, out_features=768, bias=False)\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (1): T5LayerCrossAttention(\n              (EncDecAttention): T5Attention(\n                (q): Linear(in_features=768, out_features=768, bias=False)\n                (k): Linear(in_features=768, out_features=768, bias=False)\n                (v): Linear(in_features=768, out_features=768, bias=False)\n                (o): Linear(in_features=768, out_features=768, bias=False)\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (2): T5LayerFF(\n              (DenseReluDense): T5DenseActDense(\n                (wi): Linear(in_features=768, out_features=3072, bias=False)\n                (wo): Linear(in_features=3072, out_features=768, bias=False)\n                (dropout): Dropout(p=0.1, inplace=False)\n                (act): ReLU()\n              )\n              (layer_norm): T5LayerNorm()\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n        )\n      )\n      (final_layer_norm): T5LayerNorm()\n      (dropout): Dropout(p=0.1, inplace=False)\n    )\n    (lm_head): Linear(in_features=768, out_features=32128, bias=False)\n  )\n)"},"metadata":{}}]}]}